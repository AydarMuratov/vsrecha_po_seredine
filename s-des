#include <iostream>
#include <bitset>
#include <vector>

using namespace std;

// Функция перестановки битов
bitset<8> permute(bitset<8> input, const vector<int>& table, int size) {
    bitset<8> output;
    for (int i = 0; i < size; ++i) {
        output[i] = input[table[i] - 1];
    }
    return output;
}

// Функция циклического сдвига влево
bitset<5> leftShift(bitset<5> key) {
    bitset<5> shifted;
    shifted[0] = key[1];
    shifted[1] = key[2];
    shifted[2] = key[3];
    shifted[3] = key[4];
    shifted[4] = key[0];
    return shifted;
}

// Функция генерации подключей
void generateSubKeys(bitset<10> key, bitset<8>& k1, bitset<8>& k2) {
    vector<int> p10 = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
    vector<int> p8 = {6, 3, 7, 4, 8, 5, 10, 9};
    vector<int> ls1 = {1, 2, 3, 4, 0};
    vector<int> ls2 = {2, 3, 4, 0, 1};

    // Применяем перестановку Р10
    bitset<10> permutedKey = permute(key, p10, 10);

    // Разделяем ключ на две половины
    bitset<5> left = permutedKey >> 5;
    bitset<5> right = permutedKey & 0x1F;

    // Применяем циклический сдвиг влево
    bitset<5> shiftedLeft = leftShift(left);
    bitset<5> shiftedRight = leftShift(right);

    // Объединяем половины ключа
    bitset<10> combined = (shiftedLeft.to_ulong() << 5) | shiftedRight.to_ulong();

    // Генерируем подключи
    k1 = permute(combined, p8, 8);

    shiftedLeft = leftShift(shiftedLeft);
    shiftedRight = leftShift(shiftedRight);
    combined = (shiftedLeft.to_ulong() << 5) | shiftedRight.to_ulong();

    k2 = permute(combined, p8, 8);
}

// Функция XOR
bitset<8> xorOperation(bitset<8> a, bitset<8> b) {
    return a ^ b;
}

// Функция расшифрования одного байта
bitset<8> decryptByte(bitset<8> input, bitset<8> key) {
    vector<int> ip = {2, 6, 3, 1, 4, 8, 5, 7};
    vector<int> ipInverse = {4, 1, 3, 5, 7, 2, 8, 6};
    vector<int> ep = {4, 1, 2, 3, 2, 3, 4, 1};
    vector<int> p4 = {2, 4, 3, 1};
    vector<int> s0 = {1, 0, 3, 2, 3, 2, 1, 0, 0, 2, 1, 3, 3, 1, 3, 2};
    vector<int> s1 = {0, 1, 2, 3, 2, 0, 1, 3, 3, 0, 1, 0, 2, 1, 0, 3};

    // Применяем перестановку IP
    bitset<8> permutedInput = permute(input, ip, 8);

    // Разделяем вход на две половины
    bitset<4> left = permutedInput >> 4;
    bitset<4> right = permutedInput & 0x0F;

    // Раунд 1
    bitset<4> expandedRight = permute(right, ep, 8);
    bitset<8> xorResult = xorOperation(expandedRight, key);
    bitset<4> leftHalf = xorResult >> 4;
    bitset<4> rightHalf = xorResult & 0x0F;

    int row = leftHalf[0] * 2 + leftHalf[3];
    int col = leftHalf[1] * 2 + leftHalf[2];
    bitset<2> s0Output(s0[row * 4 + col]);

    row = rightHalf[0] * 2 + rightHalf[3];
    col = rightHalf[1] * 2 + rightHalf[2];
    bitset<2> s1Output(s1[row * 4 + col]);

    bitset<4> p4Output = permute(bitset<4>((s0Output.to_ulong() << 2) | s1Output.to_ulong()), p4, 4);
    bitset<4> xorResult2 = xorOperation(p4Output, left);
    bitset<8> round1Output((xorResult2.to_ulong() << 4) | right.to_ulong());

    // Раунд 2
    left = round1Output >> 4;
    right = round1Output & 0x0F;

    expandedRight = permute(right, ep, 8);
    xorResult = xorOperation(expandedRight, key);
    leftHalf = xorResult >> 4;
    rightHalf = xorResult & 0x0F;

    row = leftHalf[0] * 2 + leftHalf[3];
    col = leftHalf[1] * 2 + leftHalf[2];
    s0Output = s0[row * 4 + col];

    row = rightHalf[0] * 2 + rightHalf[3];
    col = rightHalf[1] * 2 + rightHalf[2];
    s1Output = s1[row * 4 + col];

    p4Output = permute(bitset<4>((s0Output.to_ulong() << 2) | s1Output.to_ulong()), p4, 4);
    xorResult2 = xorOperation(p4Output, left);
    bitset<8> round2Output((xorResult2.to_ulong() << 4) | right.to_ulong());

    // Объединяем половины и применяем обратную перестановку IP^(-1)
    bitset<8> finalOutput = permute(round2Output + (round1Output << 4), ipInverse, 8);

    return finalOutput;
}

// Функция расшифрования сообщения
string decryptMessage(const string& message, bitset<10> key) {
    bitset<8> k1, k2;
    generateSubKeys(key, k1, k2);

    string decryptedMessage;
    for (char c : message) {
        bitset<8> encryptedByte(c);
        bitset<8> decryptedByte = decryptByte(encryptedByte, k2);
        decryptedByte = decryptByte(decryptedByte, k1);
        decryptedMessage += decryptedByte.to_ulong();
    }

    return decryptedMessage;
}

int main() {
    string message = "Зашифрованное сообщение";
    bitset<10> key("1010000010"); // Пример ключа

    cout << "Зашифрованное сообщение: " << message << endl;

    string decryptedMessage = decryptMessage(message, key);

    cout << "Расшифрованное сообщение: " << decryptedMessage << endl;

    return 0;
}
int main() 
{
    SDES S;
	int round1_key[0b10101010]; // Известный ключ 1
	int round2_key[0b01010101]; // Известный ключ 2
	int plaintext[0b11001100]; // Исходный текст
	int pt[8];
	// Шифруем текст с использованием известных ключей
	int* intermediate = S.encode(pt, plaintext,round1_key);
	int* ciphertext = S.encode(pt,round2_key, intermediate);

	// Выполняем атаку встречу по середине
	int recoveredKey = S.meetInTheMiddle(ciphertext, plaintext);

	cout << "Восстановленный ключ: " << recoveredKey << endl;

	return 0;
}
